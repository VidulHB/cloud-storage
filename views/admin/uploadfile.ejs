<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ACPASD | Admin | Upload File</title>
  <link rel="shortcut icon" href="https://acpasd.cyclic.app/img/main_icon.png" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <script src="https://kit.fontawesome.com/6324e69e50.js" crossorigin="anonymous"></script>
  <script src="https://js.upload.io/upload-js/v2"></script>
  <link rel="stylesheet" href="https://acpasd.cyclic.app/styles.css">
  <style>
  .modal {
  display: none; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 1; /* Sit on top */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0,0.5); /* Black w/ opacity */
}

/* Modal Content/Box */
.modal-content {
  background-color: #333;
  opacity: 0.9;
  margin: 15% auto; /* 15% from the top and centered */
  padding: 30px;
  border-radius: 20px;
  width: 350px; /* Could be more or less, depending on screen size */
  height: 85px;
}
.modal-content h1{
  margin-bottom:10px;
}
/* The Close Button */
.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}

  /* Modal Header */
.modal-header {
  padding: 2px 16px;
  color: white;
}

.modal-body {padding: 2px 16px;}

.modal-footer {
  padding: 2px 16px;
  color: white;
}

/* Add Animation */
@-webkit-keyframes slideIn {
  from {bottom: -300px; opacity: 0} 
  to {bottom: 0; opacity: 1}
}

@keyframes slideIn {
  from {bottom: -300px; opacity: 0}
  to {bottom: 0; opacity: 1}
}

@-webkit-keyframes fadeIn {
  from {opacity: 0} 
  to {opacity: 1}
}

@keyframes fadeIn {
  from {opacity: 0} 
  to {opacity: 1}
}
</style>
</head>

  <body>
    <div class="news_form">
      <h2>Upload Files Here</h2>
      <form class="admin_news" action="/api/addnews" method="post" enctype="multipart/form-data">
        <input type="file" id="fileInput" name="fileInput" required multiple>
      </form>
    </div>
    <div id="myModal" class="modal">
      <div class="modal-content">
        <h2 style="margin-top: -15px;">File Upload Progress</h2>
        <div class="progress-container" id="progressCon">
          <p class="progress-p" id="progress">0%</p>
          <div class="progress-bar-container">
            <div class="progress-bar" id="progressBar" style="width: 0%"></div>
          </div>
        </div>
      </div>
    </div>
    <script src="https://github.com/googleapis/google-api-nodejs-client/blob/main/src/index.ts"></script>
    <script src="https://github.com/expressjs/multer/blob/master/index.js"></script>

    <script>
      const modal = document.getElementById("myModal");
      const fileInput = document.getElementById('fileInput');
      const progressBar = document.getElementById('progressBar');
      const progressText = document.getElementById('progress');
      const progressCon = document.getElementById('progressCon');

      // fileInput.addEventListener('change', function () {
      //   const files = fileInput.files;
      //   if (files.length > 0) {
      //     const formData = new FormData();
      //     for (let i = 0; i < files.length; i++) {
      //       formData.append('files[]', files[i]); // Use 'files[]' to indicate an array of files.
      //     }

      //     const xhr = new XMLHttpRequest();
      //     xhr.open('POST', '/Upload', true);

      //     xhr.upload.addEventListener('progress', (e) => {
      //       if (e.lengthComputable) {
      //         const percentage = Math.round((e.loaded / e.total) * 100);
      //         modal.style.display = "block";
      //         progressBar.style.width = `${percentage}%`;
      //         if (percentage === 100) {
      //           // progressText.innerHTML = `Saving... This Might Take Some Time (Depending On The File Size)`;
      //           progressBar.style.display = "none"
      //           progressText.innerHTML = ``
      //           progressText.innerHTML = `Done... You Can Click X Button To Exit This Pop-Up`
      //         } else {
      //           progressText.innerHTML = `${percentage}%`;
      //         }
      //       }
      //     });

      //     xhr.onload = function () {
      //       if (xhr.status === 200) {
      //         progressBar.style.display = "none"
      //         progressText.innerHTML = ``
      //         progressText.innerHTML = `Done... You Can Click X Button To Exit This Pop-Up`
      //       } else {
      //         console.error('Error uploading files.');
      //       }
      //     };
      //     formData.append('id', `<%-FolderID%>`)
      //     xhr.send(formData);
      //   }
      // });

      const files = fileInput.files;
      const KEYFILEPATH = 'https://acpasd.cyclic.app/service.json'
  const SCOPES = ['https://www.googleapis.com/auth/drive'];

  const auth = new google.auth.GoogleAuth({
    keyFile: KEYFILEPATH,
    scopes: SCOPES,
  });

const drive = google.drive({ version: 'v3', auth })


const upload = multer();

const uploadFile = async (fileObject, res, body) => {
  const bufferStream = new stream.PassThrough();
  bufferStream.end(fileObject.buffer);
  const Filename = `${fileObject.originalname}`;

  const fileSize = fileObject.buffer.length;

  const media = {
    mimeType: fileObject.mimeType,
    body: bufferStream,
  };

  const fileMetadata = {
    name: Filename,
    parents: [`${body.id}`],
  };

  const upload = drive.files.create(
    {
      resource: fileMetadata,
      media: media,
      fields: 'id,name',
    }
  );

  return upload; // Return the upload promise.
};

fileInput.addEventListener('change', async function () {
const uploadPromises = [];

for (const file of files) {
  const uploadPromise = uploadFile(file, res, req.body);
  uploadPromises.push(uploadPromise);
}

await Promise.all(uploadPromises);
console.log('done...')
});

    </script>
  </body>
  <script src="https://acpasd.cyclic.app/script.js"></script>
  </html>